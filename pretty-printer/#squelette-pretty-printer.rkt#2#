#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2928 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"test.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"cal.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; UN PRETTY-PRINTER POUR LE LANGAGE WHILE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; TRAITEMENT DES EXPRESSIONS DU LANGAGE WHILE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;; pretty-prints an expression"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;; pretty-print-expr : expression  -> string U error-report"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"NIL?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"nil\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"CST?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 9 #"CST->name"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"VAR?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 9 #"VAR->name"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"HD?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"(hd \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"HD->arg"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"TL?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"(tl \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"TL->arg"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"CONS?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"(cons \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"CONS->arg1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\" \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"CONS->arg2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"EQ?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"CONS->arg1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 19 3 6 #"\" =? \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"CONS->arg2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"\\npretty-print-expr\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 2 #"HD"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #"))) "
0 0 19 3 8 #"\"(hd X)\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 2 #"TL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #"))) "
0 0 19 3 8 #"\"(tl X)\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 19 3 12 #"\"(cons X Y)\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 19 3 8 #"\"X =? Y\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 2 #"HD"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 22 #"\"(hd X) =? (cons Y Z)\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";;; FONCTIONS PRELIMINAIRES AU TRAITEMENT DES COMMANDES ET DES PROGR"
 #"AMMES DU LANGAGE WHILE"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; default indentation"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; indent-default : int"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"indent-default"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"\\nindent-default\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 14 #"indent-default"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; searchs a list of indentation specifications"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; indents-search : context-name * (list indentation-spec) -> int"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 14 #"indent-default"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"snd"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"\\nindents-search\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"DO\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"DO\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"DO\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"WHILE\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"DO\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 14 #"indent-default"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 14 #"indent-default"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; makes an indentation"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; make-indent : int -> string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #" ) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #"("
0 0 14 3 11 #"make-indent"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"\\nmake-indent\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"    \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;; appends a string before every element of a list of strings"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;; append-string-before-all : string  * (list string) -> (list stri"
 #"ng)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"\\nappend-string-before-all\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pref\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"zo\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"preffoo\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"prefbar\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"prefzo\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pref\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;; appends a string after every element of a list of strings"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;; append-string-after-all : string  *  (list string) -> (list stri"
 #"ng)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"append-string-after-all"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 23 #"append-string-after-all"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"\\nappend-string-after-all\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 23 #"append-string-after-all"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"suff\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"zo\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"foosuff\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"barsuff\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"zosuff\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 23 #"append-string-after-all"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pref\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";;; appends a string after every element of a list of strings except"
 #" the last one"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;; append-string-after-all-but-last : string  *  (list string) -> ("
 #"list string)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 32 #"append-string-after-all-but-last"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 32 #"append-string-after-all-but-last"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"\\nappend-string-after-all-but-last\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 32 #"append-string-after-all-but-last"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"suff\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"zo\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"foosuff\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"barsuff\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"zo\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 32 #"append-string-after-all-but-last"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"suff\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 32 #"append-string-after-all-but-last"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pref\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;; TRAITEMENT DES COMMANDES DU LANGAGE WHILE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;; pretty-prints a command"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";;; pretty-print-command : command * (list indentation-spec) -> (lis"
 #"t string) U error-report"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 4 #"NOP?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"nop\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"SET?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 1 #"("
0 0 14 3 8 #"SET->var"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 19 3 6 #"\" := \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 1 #"("
0 0 14 3 9 #"SET->expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"WHILE?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"while \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 1 #"("
0 0 14 3 11 #"WHILE->cond"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\" do\""
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"WHILE\""
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 11 #"WHILE->body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"FOR?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"for \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 1 #"("
0 0 14 3 10 #"FOR->count"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\" do\""
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"FOR\""
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 9 #"FOR->body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"IF?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"if \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 1 #"("
0 0 14 3 8 #"IF->cond"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 2 #" ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 8 #"IF->then"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 2 #" ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 8 #"IF->else"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"fi\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\npretty-print-command\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 1 #" "
0 0 14 3 3 #"NOP"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"nop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"X := (cons X Y)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;; pretty-prints a list of commands"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";;; pretty-print-commands : (list command) * (list indentation-spec)"
 #" -> (list string) U error-report"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 1 #" "
0 0 14 3 2 #"li"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"point-virgule"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;; met un point virgule apr\303\250s les commandes d'une ligne "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"point-virgule"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 19 3 4 #"\" ;\""
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; fait la recursion des commands"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"\\npretty-print-commands\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 5 #")))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"X := (cons X Y)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 5 #")))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"X := (cons X Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 17 #"\"A := (cons B C)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"\\npretty-print-command pour while\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"while X =? Y do\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\" X := (cons X Y)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"while X =? Y do\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\" X := (cons X Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\" A := (cons B C)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"WHILE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"while X =? Y do\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"     X := (cons X Y)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"WHILE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"while X =? Y do\""
0 0 24 3 1 #" "
0 0 19 3 24 #"\"     X := (cons X Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"     A := (cons B C)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"\\npretty-print-command pour for\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"FOR"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"for X do\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\" X := (cons X Y)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"FOR"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"for X do\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\" X := (cons X Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\" A := (cons B C)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"FOR"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"FOR\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"for X do\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"     X := (cons X Y)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 3 #"FOR"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"FOR\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"for X do\""
0 0 24 3 1 #" "
0 0 19 3 24 #"\"     X := (cons X Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"     A := (cons B C)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"od\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"\\npretty-print-command pour if\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 2 #"IF"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #")("
0 0 14 3 4 #"CONS"
0 0 24 3 1 #" "
0 0 14 3 3 #"NIL"
0 0 24 3 1 #" "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 1 #" "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 14 3 3 #"NIL"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"IF\""
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"if X =? (cons nil nil)\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 19 3 23 #"\"    X := (cons nil X)\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"    X := nil\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"fi\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pretty-print-command"
0 0 24 3 2 #" ("
0 0 14 3 2 #"IF"
0 0 24 3 2 #" ("
0 0 14 3 2 #"EQ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #")("
0 0 14 3 4 #"CONS"
0 0 24 3 1 #" "
0 0 14 3 3 #"NIL"
0 0 24 3 1 #" "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 1 #" "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 14 3 3 #"NIL"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"if X =? (cons nil nil)\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\" X := (cons nil X)\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\" X := nil\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"fi\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;; pretty prints an input list"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";;; pretty-print-in : (list variable) * (list indentation-spec) -> s"
 #"tring U error-report"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pretty-print-in"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 1 #" "
0 0 14 3 2 #"li"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\", \""
0 0 24 3 2 #" ("
0 0 14 3 15 #"pretty-print-in"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"\\npretty-print-in\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pretty-print-in"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pretty-print-in"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"X, Y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;; pretty-prints an output list"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";;; pretty-print-out : (list variable) * (list indentation-spec) -> "
 #"string U error-report"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"pretty-print-out"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 1 #" "
0 0 14 3 2 #"li"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pretty-print-expr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\", \""
0 0 24 3 2 #" ("
0 0 14 3 15 #"pretty-print-in"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"lc"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"\\npretty-print-out\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 16 #"pretty-print-out"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"X\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 16 #"pretty-print-out"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"X, Y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;; pretty-prints a while program"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;; pretty-print-progr : program * indentation-specs -> (list string"
 #") U error-report"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"pretty-print-progr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 2 #"li"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"PROGR?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"read \""
0 0 24 3 2 #" ("
0 0 14 3 15 #"pretty-print-in"
0 0 24 3 2 #" ("
0 0 14 3 9 #"PROGR->in"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 24 #"append-string-before-all"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-indent"
0 0 24 3 2 #" ("
0 0 14 3 14 #"indents-search"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"li"
0 0 24 3 3 #"))("
0 0 14 3 21 #"pretty-print-commands"
0 0 24 3 2 #" ("
0 0 14 3 11 #"PROGR->body"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"write \""
0 0 24 3 2 #" ("
0 0 14 3 16 #"pretty-print-out"
0 0 24 3 2 #" ("
0 0 14 3 10 #"PROGR->out"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 2 #"li"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"\\npretty-print-progr\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 18 #"pretty-print-progr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"PROGR"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 2 #") "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"HD"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #")) ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"TL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 7 #"))))) )"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"read X\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\" Y := nil ;\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\" while X do\""
0 0 24 3 1 #" "
0 0 19 3 26 #"\"  Y := (cons (hd X) Y) ;\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"  X := (tl X)\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\" od\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"write Y\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 18 #"pretty-print-progr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"PROGR"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 2 #") "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"HD"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #")) ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"TL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 7 #"))))) )"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"WHILE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"read X\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\" Y := nil ;\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\" while X do\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 30 #"\"      Y := (cons (hd X) Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"      X := (tl X)\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\" od\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"write Y\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 18 #"pretty-print-progr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"PROGR"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 2 #") "
0 0 14 3 3 #"NIL"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"HD"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #")) ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"CONS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"HD"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 4 #")) ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"TL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 7 #")))))  "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"SET"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"TL"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 24 3 7 #"))))) )"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"VAR"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"WHILE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"read X\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\" Y := nil ;\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\" while X do\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 30 #"\"      Y := (cons (hd X) Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\"      while X do\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"           Y := (cons (hd X) Y) ;\""
0 0 24 3 1 #" "
0 0 19 3 24 #"\"           X := (tl X)\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"      od ;\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"      X := (tl X)\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\" od\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"write Y\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;; pretty-prints a while program"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;; pretty-print : program x [(list indentation-spec)] -> string U e"
 #"rror-report"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(display \"pretty-print\")"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(test (pretty-print (PROGR (list (VAR \"X\")) "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                           (list (SET (VAR \"Y\") NIL) "
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                                 (WHILE (VAR \"X\") "
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";                                        (list (SET (VAR \"Y\") (CON"
 #"S (HD (VAR \"X\")) (VAR \"Y\"))) "
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";                                              (SET (VAR \"X\") (TL "
 #"(VAR \"X\"))))) )"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";                           (list (VAR \"Y\")))) "
0 0 24 29 1 #"\n"
0 0 17 3 14 #";      \"read X"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";%"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Y := nil ;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; while X do"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";  Y := (cons (hd X) Y) ;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  X := (tl X)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; od"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";%"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";write Y\")"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";(display (pretty-print (PROGR (list (VAR \"X\")) "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                           (list (SET (VAR \"Y\") NIL) "
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                                 (WHILE (VAR \"X\") "
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";                                        (list (SET (VAR \"Y\") (CON"
 #"S (HD (VAR \"X\")) (VAR \"Y\"))) "
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";                                              (SET (VAR \"X\") (TL "
 #"(VAR \"X\"))))) )"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";                           (list (VAR \"Y\")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(test (pretty-print (PROGR (list (VAR \"X\")) "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                           (list (SET (VAR \"Y\") NIL) "
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                                 (WHILE (VAR \"X\") "
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";                                        (list (SET (VAR \"Y\") (CON"
 #"S (HD (VAR \"X\")) (VAR \"Y\")))"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";                                              (WHILE (VAR \"X\") "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";                                                     (list (SET (VA"
 #"R \"Y\") "
) 0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #";                                                                (CO"
 #"NS (HD (VAR \"X\")) (VAR \"Y\")))               "
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";                                                           (SET (VA"
 #"R \"X\") (TL (VAR \"X\")))))  "
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";                                              (SET (VAR \"X\") (TL "
 #"(VAR \"X\"))))) )"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";                           (list (VAR \"Y\"))) "
0 0 24 29 1 #"\n"
0 0 17 3 56
#";                    (pair \"WHILE\" 5) (pair \"PROGR\" 2)) "
0 0 24 29 1 #"\n"
0 0 17 3 14 #";      \"read X"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";%"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  Y := nil ;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  while X do"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";       Y := (cons (hd X) Y) ;"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";       while X do"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";            Y := (cons (hd X) Y) ;"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";            X := (tl X)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";       od ;"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";       X := (tl X)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";  od"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";%"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";write Y\")"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";(display (pretty-print (PROGR (list (VAR \"X\")) "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                           (list (SET (VAR \"Y\") NIL) "
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                                 (WHILE (VAR \"X\") "
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";                                        (list (SET (VAR \"Y\") (CON"
 #"S (HD (VAR \"X\")) (VAR \"Y\")))"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";                                              (WHILE (VAR \"X\") "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";                                                     (list (SET (VA"
 #"R \"Y\") "
) 0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #";                                                                (CO"
 #"NS (HD (VAR \"X\")) (VAR \"Y\")))               "
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";                                                           (SET (VA"
 #"R \"X\") (TL (VAR \"X\")))))  "
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";                                              (SET (VAR \"X\") (TL "
 #"(VAR \"X\"))))) )"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";                           (list (VAR \"Y\"))) "
0 0 24 29 1 #"\n"
0 0 17 3 56
#";                    (pair \"WHILE\" 5) (pair \"PROGR\" 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0           0
